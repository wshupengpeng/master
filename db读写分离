孔雀翎是古龙《七种武器》的第二篇
孔雀翎讲述了两个好基友小高和小武的故事
小武是武林世家孔雀山庄的少庄主，他们家有个祖传的大杀器叫做孔雀翎
孔雀翎号称天下第一暗器，能叫来犯者有来无回，所以孔雀山庄在江湖中威名显赫

小高有个仇家，感觉自己干不过，就找小武借了大杀器孔雀翎来应敌
有了孔雀翎的小高自觉威武霸气，徒手就把仇家秒了，原来孔雀翎只不过赋予了他所欠缺的自信罢了
然后他准备把孔雀翎拿出来向女盆友得瑟一把的时候，发现孔雀翎给整丢了
于是他去找小武谢罪，小武告诉他其实这大杀器早就被先祖给整丢了，借给他的不过是个空匣子
古大侠说，真正的胜利，并不是你能用武器争取的，那一定要用你的信心
无论多可怕的武器，也比不上人类的信心
但在现实生活中，光靠信心用爱发电是远远不够的，实力必须立足于坚实的基础之上
所以到了《天涯明月刀》中，没有了孔雀翎的孔雀山庄的九重院落，三十六座楼台，八十里基业，五百条人命，三十代声名，全被仇家团灭了

时至今日，我们在做应用设计的时候，越来越忽视数据库的重要性
在很多高并发的场景，用Redis来匆匆解决问题
不可否认，Redis可以直接大幅度提高应用的并发性能，但也造成了产品团队对Redis过度依赖，数据库仅仅用来做做数据落地
世上有很多事你总以为是绝不可能发生的，但它却偏偏发生了。而且就发生在你身上。等你发现这事实时，往往已太迟
我最近接手的一个服务便是如此
前服务Owner以为有了Redis就能高枕无忧，谁知去年出了两次大事件，都和Redis被击穿有关，这哥们鸭梨山大，删号跑路了
根据实际压测以及过去生产环境出现过的故障来看，Redis可以带来极大的并发性能提升，可是一旦被击穿，假如没有好的应用和数据库设计兜底，系统直接就崩溃了
高性能的数据库设计，是保护应用的最后一道防线
否则就如同丢失了孔雀翎的孔雀山庄，徒有繁华的虚荣，即便用好基友的死保守了秘密，最终仍无法摆脱被灭团的命运

虽然大家都叫我首富，但这新接手服务架构的不靠谱仍然让我提心吊胆
唉，有钱人想过上朴实无华，且枯燥的生活也不容易
为了能睡上好觉，减少半夜被骚扰的次数，接下来先开始着手数据库层面的优化：
1、SQL优化
关于数据库性能分析Explain命令的介绍，在谷歌搜索"数据库性能 Explain"能够找到 1,960,000+ 的搜索结果，基本也都大同小异
另一方面，绝大多数服务Owner接手产品的时候，数据库结构已经积劳成疾，很难再去做大的结构上的改动优化了，只能做些小修小补
好在通过数据库的监控很容易就能发现慢SQL，然后Explain一把很容易找到问题点，想做些优化也不难
我找到了慢SQL之后，采用了更简单直接的方法，先请高手吃饭，然后请他们友情支持

专业的事情交给专业的人去做，有钱人解决问题的思路，往往就是这么简简单单，且朴实无华

2、压力测试
在我的Blog《一只菜鸟的工作日常》里，介绍了通过压测发现DBHandler的一个问题的定位过程
事实上，不少开源组件的稳定性和性能比商业组件差很多，例如JBoss最喜欢把不成熟的组件先扔到开源社区让大家先填坑
因此对于那些重要的应用，压测是必不可少的，能发现极端情况下的不少异常
假如孔雀山庄做好了日常的各种测试和演练，也不至于庄主吃了个控制技能，小弟们就被秒光了

3、读写分离
所谓光阴似箭，真的一点也不错，因为才一转眼就要说到重点了：数据库的读写分离
互联网应用数据量用户量大，但是应用逻辑相对简单，企业应用正好相反
所以数据库读写分离对于互联网应用已经是非常成熟的解决方案，但在企业内部却鲜有使用
读写分离的目的是能够在读数据库上建集群，从而极大提升数据库的查询性能
在实际业务场景中，绝大多数读操作比写会更加频繁，数据库的内建复制机制基本可以做到秒级同步
如果对数据查询的实时性不是非常苛刻，又有高并发的业务场景，便可以尝试使用读写分离方案
互联网上的读写分离大多使用Mysql Proxy来做代理，通过Lua脚本实现读写路由
我司IT应用SE基本都是爪哇程序猿，对脚本语言嗤之以鼻，互联网上火爆的Lua引擎很难有生存空间，更谈不上技术栈积累
所以数据库读库通过更为传统的4层交换来做负载均衡，产品团队自行在应用逻辑中来实现读写路由


数据库读写分离方案，还可以极大提高数据库的可靠性
传统的数据库主备方案，数据读写都在主数据库执行，当出现故障，直接通过集群做主备自动切换
但此时应用服务器需要重新和新的主数据库建立连接
虽说握手的过程也就不到几秒钟
也就是说秒速 5 厘米的樱花刚刚离开树梢一点点
「亚洲飞人」苏炳添还没跑到百米的一半
玛莎拉蒂 Levante 还没从零加速到百公里，建立连接就完成了
但假如是发生在用户访问高峰期，蜂拥而至的请求很可能直接把应用服务器给挂死
做了读写分离之后，不仅读写访问做了分流，读操作还会分流到了多个读库节点
写库节点挂了不会影响读操作，读库节点只要没全挂还有4层交换来兜底，极其适合需要频繁查询的业务场景

以前我们需要找DBA手工创建读库，配置复制关系，然后自己去申请负载均衡（ELB）绑定到读实例
而现在这一切直接在RDS的管理控制台界面就可以直接搞定啦
而HAE可视化服务开发模式，是读是写一目了然，完美支持数据库的读写分离，需要切换只需要修改配置即可
