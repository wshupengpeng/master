聚簇索引（innoDB引擎）：主键的叶子节点存储record数据，而辅助索引的叶子节点存储主键索引值，当查询使用辅助索引时，会导致回表查询主键索引树。
非聚簇索引（MyISAM引擎）：主键索引树的树节点存储主键值，叶子节点存储指向record数据的索引值，而辅助索引的树节点存储索引值，叶子节点存储指向record数据的索引值。
非聚簇节点的主键索引树和辅助索引树没有什么太大区别，主要区别在于树节点存储的索引值不同，叶子节点存储的数据都是record对应数据的地址。
区别：MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，
这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。

聚簇索引下的
覆盖索引：指的是索引值覆盖查询值，可以通过索引直接查询对应的列值。一般是通过查询的列值就是复合索引值，where条件跟复合索引过滤，则可以通过索引值直接查找对应的record值
，使用b-tree存储数据。
非覆盖索引：指的是索引无法直接通过索引查询到对应的列值，会导致回表查询。列值包含非复合索引值，导致辅助索引值取主键索引回表查询列值。

b-tree：树节点存储data值，导致索引值偏大，而内存读取按照分页4kb读取，导致读取内容减少。
b+tree：叶子节点存储data值，树节点只存储索引值，通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构
。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。





