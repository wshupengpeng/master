java垃圾回收与jvm调优问题：
	一、垃圾回收算法：
		1 引用计数法 ： 引用则count++ ，出现问题 循环应用导致无法回收。（不太重要）
		2 标记清除： 可达性算法，判断当前对象是否有存活的对象引用它。一般所有存活的对象，都会被根对象直接或者间接引用。
		3 标记整理： 在标记清除算法的基础上，对碎片化的内存进行整理清除，主要是解决内存碎片化。
		4 复制算法： 将对象复制到另一块相同的内存中，只复制存活的对象到另一块内存中。（应用于年轻代）
	方法优化： 
		1 分代垃圾回收： 将内存分为新生代和老年代，新生代分为eden+surviver（8:2）,因为新生代的内存区域绝大部分对象都是朝生夕死，因此采用的是
		标记整理算法，而surviver区则是分为大小相同的两部分，使用复制算法。当对象存活到达一定次数时，则将对象放到老年代中。
		2 增量垃圾回收： 当进行垃圾回收时，因为是使用内存快照进行回收算法，会产生STW(STOP THE WORLD),如果回收的内存较大，会导致较长时间的停止，
		比如当进行socket的时候，如果产生STW可能导致链接中断，从而重新建立链接等一系列的问题，因此将一次大的STW分为多个小的STW，但是会导致回收的
		吞吐量下降。
		3 分区垃圾回收： 将大的内存区域进一步细分，将其分为多个块，每个区块独立使用、独立回收，可以根据停顿要求一次只回收多少区域。、
		4 并行和并发： 并行垃圾回收，多线程同时进行标记、回收操作。
		并发垃圾回收，会有垃圾回收线程同时进行标记回收操作。
		（并行和并发区别
			并行： 多个核心开启多个线程，每个核心对应一个线程，进行程序操作。 同一时段内代码各自独立运行。
			并发： 单核多线程，其实是通过时间轮片操作，给予每一个线程一段运行时间，因为CPU性能较高，所以没有感受到切换过程。 同一时间点多个代码同时执行。
		）
		
	二、垃圾回收器的分类：
		1 按碎片处理方式：
			压缩式：回收完进行碎片整理
			非压缩式：仅回收不整理碎片
		2 按工作区间：
			新生代垃圾回收器
			来年代垃圾收集器
		3 按工作模式：
			独占式垃圾回收器： 回收时STW
			并发式垃圾收集器： 回收与业务同时工作无STW
		4 按线程数：
			串行垃圾收集器：单个线程在回收
			并行垃圾收集器：多个线程同时回收
		
		
	垃圾回收器： 
		新生代垃圾回收器：
			1 serial GC : 串行的垃圾回收器，是最悠久的垃圾收集器，单线程工作效率高。
			使用复制算法，应用于年轻代，单核效率高，内存不大，JVM运行在client模式。
			2 parNew GC
			serial的多线程版本，使用复制算法，回收时会产生STW，多核效率高，单核不行。
			跟CMS进行配合效率高，建议核心数跟CPU核心数一致。
			3 Parallel Scavenge GC（jdk1.8 默认使用，使用此垃圾回收器老年代默认激活Parallel Old GC ）
			吞吐量优先的垃圾回收器、垃圾回收时间占比最小
			新生代使用复制算法
			与老年代回收器Parallel Old GC 搭配
			优势：年轻代和老年代都是STW方式。
		老年代的垃圾回收器：
			1 serial old GC （是serial GC的多线程版本）：
			serial old 使用标记整理算法，应用于老年代的垃圾回收
			serial old 还是CMS收集器的后备方案		
			2 Parallel Old GC 
			标记整理算法
			3 CMS：
			使用标记清理算法，仅工作与老年代
			并发垃圾收集、STW时间很短
			可以搭配serial GC 和 parNew使用。
			低延迟、并发的垃圾收集器（如果回收失败，没有获取到足够的内存空间，最终会切换到serial old）
			清理流程：
				先进行initial-mark 初始标记，标记处与GC roots直接关联的对象-》concurrent-mark 并发标记，从直接关联对象直接遍历整个对象图，
				时间长，但是并发进行-》remark 最终标记 重新确认标记对象（防止重新激活）->sweeping、reset 清理标记对象，清理GC过程中的各种状态。
				标记清理，会产生内存碎片，大对象放到堆时，无法获取足够空间，则导致 parallel failed 回退使用serial old。
		通用垃圾回收器： G1、ZGC
		G1: 面向服务端，把内存分为多个region区域，每个区域会被标记为3种，1是Eden space 2是 survivor space 3 是old Generation ，内部维护一张表
		通过计算获取回收时间和回收内存，会根据配置参数算出回收最优解。
		优势：即并发又并行、分区又分带、不会产生内存碎片，可预测STW时间、可以指定最大停顿时间。
		不足：记录Rset，当堆比较小的时候，占用内存较多。6-8G G1占优，小于6G CMS占优。
		
		
		
		
		
