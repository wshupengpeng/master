import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;

import java.text.Normalizer;
import java.util.List;

/**
 * <p>
 * 安全检查工具
 * </p>
 *
 * @author vastliu
 * @projectName: PoService
 * @package: com.huawei.it.oem.po.utils
 * @ClassName: NormalizerUtil
 * @description:
 * @date: Created in 2021-06-28 20:05
 * @copyright: Copyright (c) 2021
 * @version: V1.0
 * @modified: vastliu
 */
public class NormalizerUtil {
    private static final Logger log = LoggerFactory.getLogger(NormalizerUtil.class);

    /**
     * 校验对象
     *
     * @param obj      待检验对象
     * @param classz   反序列化后正确类
     * @return T       检验后对象
     * @throw          无
     */
    public static <T> T normalizeForBean(T obj, Class<T> classz) {
        T result = null;
        try {
            if (null == obj) {
                return result;
            }
            String temp = Normalizer.normalize(JSON.toJSONString(obj, SerializerFeature.WriteMapNullValue),
                    Normalizer.Form.NFKC);
            result = JSONObject.toJavaObject(JSON.parseObject(temp), classz);
        } catch (ClassCastException e) {
            log.error("Be Care For SSRF!!!");
        }
        return result;
    }

    /**
     * 校验集合
     *
     * @param obj       待检验集合对象
     * @param classz    反序列化后正确类
     * @return List<T>  检验后集合对象
     * @throw           无
     */
    public static <T> List<T> normalizeForList(List<T> obj, Class<T> classz) {
        List<T> result = null;
        try {
            if (null == obj) {
                return result;
            }
            String temp = Normalizer.normalize(JSON.toJSONString(obj, SerializerFeature.WriteMapNullValue),
                    Normalizer.Form.NFKC);
            result = JSONObject.parseArray(temp, classz);
        } catch (ClassCastException e) {
            log.error("Be Care For SSRF!!!");
        }
        return result;
    }

    /**
     * 过滤不安全的特殊字符
     *
     * @param item      待检字符串
     * @return String   检验后的字符串
     * @throw           无
     */
    public static String normalizeForString(String item) {
        String reslut = null;
        if (null == item) {
            return reslut;
        }
        reslut = Normalizer.normalize(item, Normalizer.Form.NFKC);
        return reslut;
    }
}
