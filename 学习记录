2020-10-16今日总结：
	1 MessageSource接口问题
		未解决问题：实现MessageSourceAware 接口，重写setMessageSource方法，通过@Bean方式设置MessageSource
		对象，导致报错。No message found under code selfCheckSubmit.expertScoring zh-CN
		猜测原因： 没有找到对应message name信息，导致没有找到配置文件。
		产生现象： 添加@Bean 方法导致报错，不添加则正常运行。
		建议：学习spring初始化bean的流程。
		已解决：问题原因@Bean默认使用方法名作为beanName，因此加上beanName导致注入属性错误，引起报错。
		手动添加beanName，通过@Resouce或者使用@Autowired+@Qualifier 指定名字注入。
2020-10-17 今日总结:
1 构建AOP切面日志工作
   遇到问题： （1） 切入点规则问题：通过切面表达式+@Annotation配合获取当前包下的请求接口+被log注解
   包含的接口。
   一、@Pointcut(value = "@annotation(com.huawei.annotation.Log) || " +"execution(public * com.huawei.api..*(..))")
   二、基于注解作为切面方程的@Around(value = "@annotation(log)")  拦截所有带有Log注解的接口
   三、多个point（）可以通过 || && ！来进行表达式的组合拓展
   
   （2） 切面返回值问题：
		一、被代理类含有返回值，需要切面方程返回返回值，否则返回null值，如果返回值为基本数据类型且
		代理类没有返回值，则会导致报错，原因在于如果代理方法返回值为void则默认返回null值，而基本数据
		类型没有null值，导致报错。
		解决方法：返回值设置为Object，获取被代理类的返回值对象，返回被代理类的返回值对象。
		（ps：如果被代理类返回值为void，proceed执行后的结果为null）
		二、将基本数据类型改为包装类，如果代理类返回值为null，则会报错，改为包装类则可以接受为null值。
    扩展知识：可以通过args、bean 获取被代理类的参数信息，within、this、target、annotation获取指定注解内的方法
	，注解类型也必须是全限定类型名，必须是在目标对象上声明这个注解，在接口上声明的对它不起作用。
	
	例子：
		@Before(value=" args(param)", argNames="param") //明确指定了参数  
		public void before1(String param) {  
			System.out.println("===param:" + param);  
		} 
		如果“class文件中含有变量调试信息”将使用这些方法签名中的参数名来确定参数名；
		
		@Before(value=" args(param)") //不需要argNames了  
		public void before1(JoinPoint jp, String param) {  
			System.out.println("===param:" + param);  
		}
		
		@Before(args(param) && target(bean) && @annotation(secure)",   
				argNames="jp,param,bean,secure")  
		public void before5(JoinPoint jp, String param,  
		 IPointcutService pointcutService, Secure secure) {  
		……  
		} 
		
		解释： target必须写出实现的接口类型 args如果想要命中，必须写上所有的被代理类的请求参数，缺少一个都不能拦截。
		annotation不用解释了。
   （3） mybatis的日期字段精确到时分秒需要使用jdbcType=TIMESTAMP类型。
   （4） mybatis的<foreach>标签中的collection当数据为list时使用list，如果加上@Param注解则注解Id为准。
   （5） 通过spring的LocalVariableTableParameterNameDiscoverer可以通过反射获取Method中的参数名。
	 LocalVariableTableParameterNameDiscoverer discoverer=new LocalVariableTableParameterNameDiscoverer();
        String[] parameterNames = discoverer.getParameterNames(method);
		parameterNames 不为null遍历即可获取方法上的参数名称。
   （6）可以通过当前方法获取当前线程下的request对象。 
     ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
   
   
   2020-10-19今日总结：
	1 关于如何获取实际访问服务器的ip地址问题：
	 出现此状况原因：
			（1） 客户端访问服务端通过nginx反向代理进行服务访问，
			  导致request.remoteAddr方法的地址是nginx服务代理地址，因此通过此方式无法获取实际用户客户端地址，
			  而在http扩展协议中，定义了HTTP X-Forwarded-For请求头，当出现代理情况时会apache服务器会在请求上
			  加上此参数。
			  例子：
			  如果一个 HTTP 请求到达服务器之前，经过了三个代理 Proxy1、Proxy2、Proxy3，IP 分别为 
			  IP1、IP2、IP3，用户真实 IP 为 IP0，那么按照 XFF 标准，服务端最终会收到以下信息：
			  X-Forwarded-For: IP0, IP1, IP2
			  Proxy3 直连服务器，它会给 XFF 追加 IP2，表示它是在帮 Proxy2 转发请求。列表中并没有 IP3，IP3 可以
			  在服务端通过 remote_address 字段获得。我们知道 HTTP 连接基于 TCP 连接，HTTP 协议中没有 IP 的概念，
			  remote_address 来自 TCP 连接，表示与服务端建立 TCP 连接的设备 IP，在这个例子里就是 IP3。
			  
	 * 各种代理
     * X-Forwarded-For：Squid服务代理
     * Proxy-Client-IP：apache服务代理
     * WL-Proxy-Client-IP：weblogic服务代理
     * X-Real-IP：nginx服务代理
     * HTTP_CLIENT_IP：有些代理服务器
	 
	2 shiro学习笔记：
	 Authentication： 鉴权，验证用户登录信息。
	 Authorization：授权，验证合法用户是否有相应的某个权限，即判断用户是否能做这个事情。
	 Session Management：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；
	 Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
	 Web Support：Web 支持，可以非常容易的集成到 Web 环境；
	 Caching：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；
	 Concurrency：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；
	 Testing：提供测试支持；
	 Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；
	 Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。
	 
	2020-10-22 今日总结：
	1 数据库锁表问题：
		mysql中对于同一张表不同数据进行更新时，如果上一个事务未commit，则导致锁表，
		如果根据索引字段进行update，则只会进行行级锁。
		解决办法： 建立惟一索引，预防表级锁。
    2 spring声明式事务：
		spring默认使用runtimeException作为回滚异常，其他类型异常不回滚。
		而任何Checked Exception 将不导致事务回滚；异常名字定义和TransactionProxyFactoryBean中含义一样
		可以通过参数：rollback-for 和no-rollback-for 设置回滚异常种类和不回滚异常种类。
	3 嵌套事务问题：
	事务传播行为类型	说明
	PROPAGATION_REQUIRED	如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
	PROPAGATION_SUPPORTS	支持当前事务，如果当前没有事务，就以非事务方式执行。
	PROPAGATION_MANDATORY	使用当前的事务，如果当前没有事务，就抛出异常。
	PROPAGATION_REQUIRES_NEW	新建事务，如果当前存在事务，把当前事务挂起。
	PROPAGATION_NOT_SUPPORTED	以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	PROPAGATION_NEVER	以非事务方式执行，如果当前存在事务，则抛出异常。
	PROPAGATION_NESTED	如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。
	
	PROPAGATION_REQUIRED：
		1 外围方法未开启事务-》方法1插入数据-》 方法2插入数据  -》外围方法抛出异常
		   结果： 方法1 方法2 均插入成功，因为外围方法没有事务，required会另起事务运行，两个事务不冲突。
		2 外围方法开启事务 -》方法1插入数据-》 方法2插入数据  -》外围方法抛出异常
		   结果： 方法1 方法2 均插入不成功，因为外围方法有事务，required会加入当前事务运行，报错同时回滚。
		3 外围方法开启事务-》方法1插入数据-》方法2插入数据抛出异常被捕获
		   结果： 方法1 方法2 均插入不成功，因为外围方法有事务，外围方法和方法1、方法2均在同一事务下，方法2
		   异常即使捕获异常也会被感知到，需要同时回滚，重点：required_new和nested被捕获均只有子事务回滚。
3的例子： @Transactional
    @Override
    public void transaction_required_required_exception_try(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addRequired(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        try {
            user2Service.addRequiredException(user2);
        } catch (Exception e) {
            System.out.println("方法回滚");
        }
    }
		
	1的例子：@Override
    public void notransaction_exception_required_required(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addRequired(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        user2Service.addRequired(user2);
        
        throw new RuntimeException();
    }
	
	PROPAGATION_REQUIRES_NEW：
	1 外围方法未开启事务-》方法1插入数据-》 方法2插入数据  -》外围方法抛出异常
	结果： 方法1 方法2 均插入成功，因为外围方法没有事务，required会另起事务运行，两个事务不冲突。
	2 外围方法开启事务 -》方法1插入数据-》 方法2插入数据报错  
	结果：方法1插入成功，方法2插入失败，因为外围方法事务和方法1、方法2事务均不为同一事务，不影响操作。
	3 外围方法开启事务-》方法1插入数据-》方法2插入数据（required_new）-》方法3插入数据抛出异常被捕获
	结果：方法1插入成功，方法2插入成功，方法3插入失败，因为外围方法事务和方法1、方法2、方法3事务
	均不为同一事务，方法3异常回滚，异常被捕获，则外围方法不回滚。	
2的例子：
   @Override
    public void notransaction_requiresNew_requiresNew_exception(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addRequiresNew(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        user2Service.addRequiresNewException(user2);
    }
3的例子：
  @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void transaction_required_requiresNew_requiresNew_exception_try(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addRequired(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        user2Service.addRequiresNew(user2);
        User2 user3=new User2();
        user3.setName("王五");
        try {
            user2Service.addRequiresNewException(user3);
        } catch (Exception e) {
            System.out.println("回滚");
        }
    }
	
	PROPAGATION_NESTED：
	验证方法1：

    @Transactional
    @Override
    public void transaction_exception_nested_nested(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addNested(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        user2Service.addNested(user2);
        throw new RuntimeException();
    }
验证方法2：

    @Transactional
    @Override
    public void transaction_nested_nested_exception(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addNested(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        user2Service.addNestedException(user2);
    }
验证方法3：

    @Transactional
    @Override
    public void transaction_nested_nested_exception_try(){
        User1 user1=new User1();
        user1.setName("张三");
        user1Service.addNested(user1);
        
        User2 user2=new User2();
        user2.setName("李四");
        try {
            user2Service.addNestedException(user2);
        } catch (Exception e) {
            System.out.println("方法回滚");
        }
    }
	
	
验证方法序号	数据库结果	结果分析
1	“张三”、“李四”均未插入。	外围方法开启事务，内部事务为外围事务的子事务，外围方法回滚，内部方法也要回滚。
2	“张三”、“李四”均未插入。	外围方法开启事务，内部事务为外围事务的子事务，内部方法抛出异常回滚，且外围方法感知异常致使整体事务回滚。
3	“张三”插入、“李四”未插入。	外围方法开启事务，内部事务为外围事务的子事务，插入“李四”内部方法抛出异常，可以单独对子事务回滚。


 REQUIRED,REQUIRES_NEW,NESTED异同
由“1.2 场景二”和“3.2 场景二”对比，我们可知：
NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。
但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，
外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，
不会影响到外围方法的事务。

由“2.2 场景二”和“3.2 场景二”对比，我们可知：
NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，
所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，
内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。
	
	
 mysql问题：
1 快照读和当前读区别？
快照读：
快照读是基于MVCC版本控制下的无锁读取数据的方式,并且能保证在无锁状态的解决数据库的脏读、不可重复读问题。其本身是使用select关键词进行读取
数据，不对数据进行加锁。快照读本身是通过undolog完成的，在mysql数据库中含有两个隐藏列，一个是trx当前事务id，一个是rollback 指针，指向当前记录
回滚指针，在select查询则会只读取当前小于等于当前事务id的数据，从而保证事务隔离。
当前读：
delete、update、insert 、 select * from table for update  、 select * from table lock in share mode  
当前这5种方式都会触发当前读操作，因为在这5中方式下，读取数据均会加锁，delete 会根据where条件(如果条件含有索引或者主键的花)加record lock 
否则会触发表锁，也可以认为是意向锁。

2 意向锁？
mysql中，对表进行操作时需要加表锁，当其他事务对当前表进行 读、写操作时，为了解决表锁去遍历寻找当前表是否有行被锁定，因此引入意向锁，当行需要加锁时
会对表先加意向锁，当后续事务需要对表加表锁时，不需要遍历整个行去判断是否可以加锁，只需要判断当前加锁状态和意向锁是否冲突，如果不冲突则直接去持有相应的锁。


3 MVCC 并发控制？
基于无锁状态的多版本并发，mysql的行记录上有两个隐藏列，一个是trx_id 事务id 一个是roll_back 指针，当修改数据时，需要在undolog记录修改前的数据，
并将修改后的数据的roll_back指针指向修改前数据上，因此形成了一个链表结构，可以随时在事务不生效时roll_back 回去。当在开启事务时，读取数据过程中
会读取小于等于当前事务创建id的值，并且删除事务id大于当前事务id或者删除事务id为空的数据。


4 间歇锁产生原因？
间歇锁是锁定索引记录之间的间隙，mysql可以通过行锁 + 间歇锁方式幻影行的出现，间歇锁可以被多个事务重入，间歇锁会阻止其他事务来更新或插入间歇区间内的记录。

MySQL这3种锁的特性可大致归纳如下：

表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。

行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。

页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。

数据库引擎通常必须获取多粒度级别上的锁才能完整地保护资源。

5 深度分页，cursor 游标方式，这种方式优点是快，但是无法给出具体页码
目前淘宝列表查询对于多数据采用下拉方式，不会出分页数据了。
第二个方案采用ES（需要具体分析ES优劣）
6 record lock  行锁定条件
通过索引列进行的加锁操作，是使用行锁的基础。


框架问题:
1 日志追踪服务trance
2 网关鉴权、服务路由、负载均衡
3 rateLimiter （令牌桶算法和漏桶算法） 
  使用了模板方式模式，分析tryAcquire 和 acquire 的区别
4 histrix 服务熔断和服务降级, Dubbo、eureka、zk作为注册服务中心优劣
5 数据库和缓存库双写一致性问题
   一致性问题： 强一致性，保证数据修改一定是一致的，修改之后会立即生效。
			    弱一致性，保证数据在在未来某个时间一致
				最终一致性： 保证数据最终结果是一致的，强烈推荐。
 对于分布式系统而言，存在多个服务实例，因此在提交或修改数据的时候，往往存在CAP理论的问题，也就是一致性，可用性，分区容错性，只能三选其二
 对于eureka而言选择了AP 可用行和分区容错性 ,zk 采用了cp 一致性和分区容错性。每个着重点不同，需要具体分析。
 而对于目前这个双写一致性问题
 查询操作-》查询缓存 -》 未命中 -》 查数据库 -》更新缓存
					 -》 命中 -》返回结果
 更新操作-》修改数据库-》删除缓存
 
 在此基础上特意说明修改数据库后不能put缓存。
  A请求 更新操作 -》1 修改数据库 -》 4 更新缓存
  B请求 更新操作 -》2 修改数据库 -》 3 更新缓存
  当多个请求进行操作时，存在当A请求先修改数据库，但未修改缓存，而B请求后修改数据库先修改缓存情况下，导致数据库和缓存不一致情况，这种情况要避免。
 而删除操作则会避免这种情况，不管A.B请求谁先修改数据库，都会被删除缓存，因此最新查询请求会查询最新数据库。
  
 
6 分布式事务解决方案（通过本地消息表+消息队列+定时任务补偿机制 感觉比较简单，2PC 太复杂了，不太适用）
 对于分布式事务而言，之前有考虑过，例如我们系统对接其他系统时，我们属于服务之间的调用，之前也出现ipap接口超时导致报错问题，出现之后导致我们本地未回滚，
 接口报错异常被捕获，当时就在想两个系统怎么保证订单系统数据一致性问题，后面想了使用消息队列+定时任务来处理，我们在处理订单时，应当捕获超时异常，其他异常
 不应捕获，报错回滚。当超时发生时，通过队列将订单投送到对方系统，并在本地维护一个消息表，当对方接到消息则判断当前订单是否生成，如果生成了订单则通过mq返回
 对应的消息状态给我们，如果没有生成则需要给我们生成订单，并将结果返回，我们本地也需要使用定时任务补偿机制，防止消息丢失，当过一段时间消息没有处理，需要
 重新投送消息。
 此方案需要仔细思考，看有没有需要优化的地方。


7 分布式锁 
   数据库实现分布式锁
   乐观锁：乐观锁实现比较复杂，需要使用唯一锁主键 + version + owner  来确定当前锁对象的归属，本身需要数据库的保证自己加锁的成功，
   通过sql； update table set owner = #{owner} and version = #{version}+1 where id = #{id} and owner = null and version = #{version}
   通过数据库的加锁方式保证操作一致性。
   悲观锁：悲观锁最简单，两种方式 1 是通过插入数据来保证，通过主键索引或者唯一键索引插入一条记录来保证自己唯一锁。
						  2 通过select ... from for update  使用数据库的排他锁实现。
   
   
   zk 实现分布式锁（监听 + 临时顺序节点）
   zk查询是否有锁节点-》 有则需要注册临时节点，并注册监听上一个节点的监听器（排队等待锁）
					 ->  没有则直接注册锁节点，获取锁。
					 
   redis实现分布式锁，现成框架（redission，本质通过lua脚本保证客户端操作原子性，而redis的单线程保证服务端原子性）
	
java 基础：
1 ThreadLocal 本地线程问题
  出现内存泄露的原因、子线程如何获取父线程ThreadLocal中的ThreadLocalMap数据
  ThreadLocal 内部存储一个map的弱引用，这个map是以当前线程作为key，value存储本地线程变量值，当数据
  
  
  
  
  
  
  
  
  
  
  
  
  
  
2 
  
   
   
  
