netty学习笔记:
	netty的核心组件
	1 Channel：
		channel是java NIO的一个基本构造，
			它代表一个到实体（如一个硬件设备、一个文件、一个网络套接字或者一个能够执行一个或者多个不同
			的I/O操作的程序组件）的开放链接，如读操作和写操作。
	NIO中常见channel值：
		1 FileChannel:用于文件的数据读写
		2 DatagramChannel:用于UDP的数据读写
		3 SocketChannel:用于TCP的数据读写，一般是客户端实现
		4 ServerSocketChannel:允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel，一般是服务器实现
	2 回调
		回调作为一个方法，只想一个已经提供给另外一个方法的引用，使得后者在适当的时候调用前者，是操作完成后通知的
		一种常见方法。
	3 Futrue： javaNIO提供，伪异步方式，get方法会阻塞，直到结果返回。
	netty提供了ChannelFutrue，可以注册监听方式进行异步方式，相对来讲比Futrue更好用。netty本身完全是异步和事件驱动的。
	4 事件和channelHandler
	netty是异步时间驱动的网络模型，通过event触发相应的处理器，来处理相应的事件结果，netty姣好的封装，开发人员只需要编写channelHandler的代码，而不需要
	处理网络请求的字符编解码、epoll模型轮询等操作，大大简化了操作。

	
第三章：
 3.1 channel、EventLoop和channelFuture
  3.1.1 channel 接口
	基本的I/O操作(bind()、connet()、read()和write()) 依赖于底层网络传输所提供的原语。在java网络编程中，其基本构造是class socket。netty的channel接口所
	提供的API，大大降低了直接使用Socket类的复杂性。此外channel还是拥有许多预定义的、专门化实现的广泛类层次结构的根，一下是一个简短的清单：
	1 EmbeddedChannel
	2 LocalServerChannel
	3 NioDatagramChannel
	4 NioSctpChannel
	5 NioSocketChannel
  3.1.2 EventLoop接口
	channel-》将channel注册到eventLoop-》在整个生命周期内都使用eventLoop处理I/O事件
	1 一个eventLoopGroup 包含一个或多个eventLoop
	2 一个eventLoop在它的生命周期内只和一个Thread绑定
	3 所有由EventLoop处理的I/O事件都将在它专有的Thread上被处理
	4 一个channel在它的生命周期内只注册于一个EventLoop
	5 一个EventLoop 可能会被分配给一个或多个Channel
	提出问题： 那对于netty模型而言，一个channel仅能绑定一个eventloop，一个eventlopp只能使用一个thread处理是否高效，当channel注册到eventLoopgroup组后，
	eventLoopgroup怎么分配channel注册到不同的eventLoop上，在性能上怎么领先于java nio的epoll模型？
	答：channel绑定一个eventLoop是为了防止多线程导致channel被读取多次，而每一个eventLoop都相当于一个epoll模型，提高了处理效率
	reactor相当于通过eventLoopgroup 来让多个epool模型处理event，而通过服务器端则是通过两个reactor来处理数据，两个reactor使用
	两个eventLoopGroup，第一个eventloopgroup是为了让新的连接更快的进入subReactor模型中，如果只有一个reactor模型，那么当event
	事件在同一时间触发多个的时候，会导致select时间处理过长，导致连接超时，而通过第一个reactor模型，会将已连接socket放入第二个
	处理读写事件的reactor中，从而使得服务端的处理效率得到提升，并通过设置eventloop，来提高并行度。
  3.1.3 channelFutrue
	netty所有的I/O都是异步的，因此一个操作可能不会立即返回，因此netty提供了channelFuture接口，其addListener()方法注册了一个channelFutrueListener，以便
	在某个操作完成时（无论是否成功）得到通知。
  3.2 channelHandler和channelPipeline
   3.2.1 channelHandler
	netty的主要组件是channelHandler，它充当了所有处理入站和出站数据的应用程序编辑的容器。这个是可行的，因为channelHandler的方法是由网络事件触发的。
	事实上，channelHandler可专门用于几乎任何类型的动作，例如将数据从一种格式转换为另外一种格式，或者在转换的过程中所跑出的异常。
	channelInboundHandler是一个经常使用的经常实现的子接口，这种类型的channelHandler接收入站事件和数据，这些数据随后将会被你的应用程序的业务逻辑所处理。
   3.2.2 channelPipeline
	channelPipeline提供了channelHandler链的容器，并定义了用于该链上传播入站和出站事件流的API。当channel被创建时，它会被自动的分配到它的专属ChannelPipeline
	channelHandler安装到channelPipeline中的过程如下所示：
	1 一个channelInitalizer的实现被注册到了ServerBootstrap 中
	2 当channelInitalizer.initChannel()方法被调用时，ChannelInitializer将在channelPipeline中安装一组自定义的channelHandler
	3 channelInitializer将它自己从channelPipeline中移除。
   3.2.3 更加深入的了解channelHandler
	channelHandler子类：
	channelhandlerAdapter
	channelInboundHandler: simpleChannelInboundHandler<T> 是子类
	channelOutboundHandler
	channelDuplexHandler
   3.2.4 编码器和解码器
   对于网络数据而言，底层都是通过字节数组传递，因此netty底层对数据进行了编解码的封装，对于出站消息而言，需要进行编码，而入站则
   需要解码，netty提供的编解码器都实现了channelOutboundHandler或者channelInboundHandler接口，对于入站消息而言，channelRead（）
   方法/事件已经被重写，从每个channel中读取的消息都会被它预置的解码器提供的decode()方法调用，并将已解码的字节转发给channelpipeline
   中的下一个channelInboundHandler。出站消息则是相反，编码器会将消息转换为字节，并转发给channelOutboundHandler。
   3.2.5 抽象类simpleChannelInboundHandler
   对于需要创建的channelHandler而言，你可以继承子类simpleChannelInboundHandler<T>，其中T为要处理成为的java类，其中最重要的方法
   是channelRead0(channelHandlerContext ,T),如果你指定泛型，则read0回传泛型类，可以直接转化为你需要的java类。
  3.3 引导
	目前netty有两种类型的引导：
	1 是基于客户端： bootstrap，用来连接远程主机和端口，eventloopgroup 只有1个
	2 是基于服务端： serverbootstrap，绑定一个本地端口，eventloopgroup 有两个（也可以只有一个，当只有一个的时候，在当前场景下
	共用一个eventLoopGroup）
	为什么服务器要有两个eventLoopGroup？
	第一个eventLoopGroup： 用来引导客户端的连接，
第四章 传输
 4.1 案例研究：传输迁移
  4.1.1 不通过netty使用的OIO和NIO
  4.1.2 通过netty使用的OIO和NIO
  以上两个小节是为了显示netty如何适配阻塞式网络编程和非阻塞式网络编程，突出netty的方便快捷，因为本身netty的代码没有什么变化
  唯一变化的就是绑定的channel类和group类，一个是阻塞式的实例对象，一个是非阻塞的实例对象。
 4.2 传输API
	netty的传输的核心API是channel，它被用于所有的I/O操作，channel的层次见图 4-1
	channel本身的子类有 serverChannel和AbstractChannel,而channel则会被分配一个channelPipeline和ChannelConfig，其中channelConfig
	是包含了该channel的所有配置设置，并且支持热更新，由于特定的传输可能具有独特的设置，所以它可能会实现一个channelConfig的子
	类型。channel也实现了comparable接口因此，当两个不同的channel返回了相同的散列码，那么AbstractChannel中的compareTo()方法
	的实现将会抛出一个Error。
  此外channelPipeline持有所有将应用入站和出站数据以及事件的ChannelHandler实例，这些ChannelHandler实现了应用程序用于处理状态
  变化以及数据处理的逻辑。
	channelHandler的典型用于包括：
	1 将数据从一种格式转换为另一种格式
	2 提供异常的通知
	3 提供channel变为活动的或者非活动的通知
	4 提供当channel注册到EventLoop或者从EventLoop注销时的通知
	5 提供有关用户自定义事件的通知
	channel本身是一个线程安全的对象，因此你可以通过channel向远程节点写数据时，消息会保证按顺序发送，
  4.3 内置的传输
  netty所提供的传输：
  1 NIO io.netty.channel.socket.nio 使用java.nio.channels 包作为基础---基于选择器的方式
  2 Epoll io.netty.channel.epoll 由JNI驱动epoll()和非阻塞IO。这个传输支持只有在Linux上可用的多种特性，如SO_REUSEPORT比NIO传输更快，而且完全是非阻塞的。
  3 OIO io.netty.channel.socket.oio 使用java.net包作为基础--使用阻塞流
  4 Local io.netty.channel.local 可以在VM内部通过管道进行通信的本地传输
  5 Embedded io.netty.channel.embedded Embedded传输，允许使用ChannelHandler而又不需要一个真正的基于网络的传输。这在测试你的
  channelHandler实现时非常有效。
  
  4.3.1 NIO - 非阻塞I/O 
  jdk1.4被引入，其中最重要的是select选择器，选择器背后的基本概念是充当一个注册表，在那里你的请求在Channel的状态发生变化时得到
  通知，可能的变化如下:
  1 新的channel 已经被接受并且就绪； accept
  2 channel的连接已经完成；connect
  3 channel中已有可供读取的数据； read
  4 channel可用于写数据；writer
  详情见4.3图
  零拷贝（zero copy）： 目前是java nio 和epoll模型才可以使用的特性，是可以高效的将数据从文件系统移动到网络接口，而不需要将
  其从内核状态复制到用户空间，也就是通过directBuffer，堆外缓冲区来进行的。
  4.3.2 Epoll模型
  netty的NIO是基于java提供的异步/非阻塞网络编程的通用抽象虽然保证了Netty在非阻塞API可以在任何平台上是以哦那个，但它也包含了相应
  的限制，因为JDK为了在所有系统上提供相同的功能，必须做出妥协。
  Linux平台在内核版本2.5.44引入了epoll模型，想比于旧的select和poll系统调用具有更好的性能，这个也是Linux上非阻塞网络编程的事实标准
  netty为Linux提供了一组NIO API 模型，它更加一致的方式使用epoll，并且以一种更加轻量的方式使用中断，用法也是非常简单，只需要将NioEventLoopGroup
  修改为EpollEventLoopGroup，将NioServerSocketChannel.class更改为EpollServerSocketChannel.class即可。
  4.3.3 OIO -- 旧的阻塞I/O 
  netty如何实现旧的阻塞模型：
  netty通过使用SO_TIMEOUT标记，它指定了一个I/O操作完成的最大毫秒数，如果操作在这个事件内没有完成，则会抛出socketTimeOut Execption，Netty会捕获
  这个异常并继续处理循环，在EventLoop下一次运行时，它将再次尝试。这也是netty这样异步框架支持OIO的唯一方式。
  4.3.4 用JVM内部通信的Local的传输
  在这个传输中，和服务器channel相关联的SocketAddress并没有绑定物理网络地址，相反，只要有服务器还在运行，它就会被存储到注册表中，并在channel关闭
  时注销，因为这个传输并不接受真正的网络流量，所以它不能和其他的传输实现进行互操作。
  4.3.5 Embedded 传输
  Netty提供了一种额外的API，是的你可以将一组channelHandler作为帮助类嵌入到其他channelHandler中，通过这种方式，你可以扩展一个channelHandler的
  功能，而又不需要修改其内部代码，详细见第九章。
  
  4.4 传输中的用例
  略
  
  第五章 ByteBuf
  ByteBuf的优点：
  1 它可以被用户自定义的缓冲区类型扩展；
  2 通过内置的复合缓冲区类型实现了零拷贝；
  3 容量可以按需增长（类似于JDK的StringBuilder）
  4 在读和写这两种模式不需要使用flip方法
  5 读和写使用了不同的索引
  6 支持方法的链式调用
  7 支持引用计数
  8 支持池化
  5.2 ByteBuf -- netty的数据容器
  5.2.1 它是如何工作的
	
  
  5.3 字节级操作
  5.3.1 随机访问索引
  ByteBuf 的索引是从零开始的：第一个字节的索引是0，最后一个字节的索引总是capacity()-1,而与NIO byteBuffer不同的是，ByteBuf是通过readerIndex和
  writerIndex来确定读写位置的，而bytebuffer因为只通过position一个索引位置确定读写位置，因此每次写完之后都需要调用filp来翻转缓冲区。
  5.3.2 顺序访问索引
  ByteBuf通过readerIndex、writerIndex和capacity将缓冲区分为3个区域，
  1是可丢弃区域，指的是已读取的数据。
  2是可读数据，即writerIndex-readerIndex ，cotent区域
  3可写数据，capacity-writerIndex
  5.3.3 可丢弃字节
  byteBuf支持丢弃已读字节，通过discardReadBytes()方法，可以丢弃并回收空间，这个操作会将content复制到readerIndex前，除非真的需要否则不要这么
  做，当内存十分宝贵的时候。
  5.3.4 可读字节
  ByteBuf可以通过read或者skip跳过当前readerIndex的位置
  当被调用的方式是readBytes(ByteBuf dest); 时那么目标dest的writerIndex也将会增加,因为写入的数据多了，所以writerIndex就会增加。
  5.3.5 可写字节
  可以通过writeBytes 写入数据，如果写操作目标是ByteBuf，那么对应的dest的readerIndex也会增加相应的长度。
  5.3.6索引管理
  byteBuf也可以使用markReaderIndex()、markWriterIndex()、resetWriterIndex、resetReaderIndex来标记readerIndex和WriterIndex来标记和重置ByteBuf的
  readerIndex和writerIndex。也可以使用clear方法将readerIndex和writerIndex都设置为0.但是这个比discardReader轻量的多，不会复制内存。
  5.3.7查找操作
  可以通过indexOf和foreachByte查找对应的byte值
  5.3.8 派生缓冲区
  派生缓冲区为ByteBuf提供了以专门的方式来呈现其内容的视图，此类视图是通过以下方法被创造的：
  1 duplicate();   复制一个
  2 slice();  同上
  3 slice(int , int); 复制一个分片
  4 Unpooled.unmodifiableBuffer();
  5 order(ByteOrder); 排序复制一份
  6 readSlice(int); 读取多少位复制一份，readIndex会改变
  每一个方式都会返回新的ByteBuf，它具有自己的读索引、写索引和标记索引。其内部存储于JDK的ByteBuffer一样也是共享的，因此如果你修改了它的内容，也
  同时修改了其对应的源实例，所以要小心。如果想要复制，请使用copy或者copy（int，int）方法，这个将会拥有独立的数据副本。
  5.3.9 读/写操作
  1 get() 和 set() 从给定索引读/写操作，不会引起索引值发生变化
  2 read()和write() ,从给定的索引开始，并且会根据已经访问的字节数对索引进行调整。
  5.4 ByteBufHolder 接口
  不太理解，是一个支持池化的对象。可以支持Netty的高级特性。
  5.5 ByteBuf分配
  5.5.1 按需分配：ByteBufAllocator 接口
  为了降低分配和释放内存的开销，netty通过了interface ByteBufAllocator实现了(ByteBuf的)池化，它可以用来分配我们所描述过的任意类型的ByteBuf实例，
  使用池化是特定于应用程序的决定，其并不会以任何方式改变ByteBuf API（语义）
  可以通过channel或者channelHandlerContext 获取一个ByteBufAllocator的引用。
  ByteBufAllocator accoc=channel.alloc();
  或者
  ByteBufAllocator accoc=ctx.alloc();
  netty 本身提供了两种ByteBufAllocator 的实现： PooledByteBufAllocator 和UnpooledByteBufAllocator.前者池化了ByteBuf的实例以提高性能并最大限度
  地减少内存碎片。此实现使用了一种称之为jemalloc的已被大量现代操作系统所采用的高效方法来分配内存。后者不池化ByteBuf实例，并且每次它被调用时返
  回一个新的实例。
  5.5.2 unpooled 缓冲区
  见 5-8图
  5.5.3 ByteUtil 类
	提供了操作ByteBuf的静态的辅助方法，这个API是通用的，并且与池化无关，所以这些方法已在分配类外部实现。
	方法最有价值的是hexdump方法，以16进制的表示形式打印ByteBuf的内容。
	equals 用来判断两个ByteBuf实例是否相等。
  5.6 引用计数
  主要是为了追踪某个特定对象的活动引用的数量，一个ReferenceCounted实现的实例通常以活动的引用计数为1开始，只要引用计数大于0，就能保证对象不会被
  释放。当活动实例引用的数量减少到0时，该实例就会被释放。
  
  第六章：channelHandler 和 channelPipeline
  6.1.1 channel的生命周期
  interface channel 定义了一组和channelInboundHandler API密切相关的简单但功能强大的状态模型：
  1 channelUnregistered  channel已经被创建，但是还没被注册到eventLoop中。
  2 channelRegistered channel已经被注册到eventLoop中
  3 channelActive channel处于活动状态（已经连接到它的远程节点）。它现在可以接收和发送数据了
  4 channelInactive channel没有连接到远程节点
  channel的生命周期如下：
  channelRegistered -》channelactive -》 channelInactive -》 channelUnregistered
  当前每一个阶段都会生成相应的事件，这些事件会被转发给channelpipeline 中的channelHandler中，其可以对相应的事件作出响应。
  
  6.1.2 channelHandler 的生命周期
  1 channelAdded 当把channelHandler添加到channelpipleline中被调用
  2 handlerRemoved 当把channelHandler移除到channelpipleline中被调用
  3 exceptionCaught 当处理中产生异常时被调用
  channelAdded-》handlerRemoved-》exceptionCaught
  netty 定义了下面两个重要的channelHandler子接口：
  1 channelInboundHandler--- 处理入站数据以及各种状态的变化
  2 channelOutboundHandler --- 处理出站数据并且运行拦截所有的操作
  
  6.1.3 channelInboundHandler 接口
  见6-3图，显示具有哪些事件触发被调用。
  当某个channelInboundHandler 的实现重写了channelRead方法时，它将负责显式地释放与池化的ByteBuf实例相关的内存。Netty为此提供了ReferenceCountUtil
  .release()释放。 如果没有释放，netty会用warn级别日志消息记录未释放的资源。一个更加简单的方式是通过SimpleChannelInboundHandler，但是问题在于
  如果想要用通过frieUserEvent方法向下传递此对象，会导致报错，需要使用retain将其引用+1.
  
  6.1.4 channelOutboundHandler 接口
   bind （ChannelHandlerContext ，SocketAddress，ChannelPromise）   当请求将channel绑定到本地地址时被调用
   connect（ChannelHandlerContext ，SocketAddress，SocketAddress，ChannelPromise） 当请求将channel连接到远程节点时被调用
   disconnect（ChannelHandlerContext，ChannelPromise） 当请求关闭channel时被调用
   close（ChannelHandlerContext，ChannelPromise） 当请求关闭channel时被调用
   deregister（ChannelHandlerContext，ChannelPromise） 当请求将channel从它的Eventloop注销时被调用
   read（ChannelHandlerContext） 当请求从channel读取更多数据时被调用
   flush（ChannelHandlerContext） 当请求通过channel将入队数据冲刷到远程节点时被调用
  。。。
  详情见 6-4
  
  channelPromise 与 ChannelFutrue channelOutboundHandler 中的大部分方法都需要一个channelPromise参数，以便在操作完成时得到通知。
  channelpromise是channelFutrue的一个子类，其定义了一些可写的方法，如setSuccess（）和setFailure，从而使channelFutrue不可变。
  
  6.1.5 channelHandler 适配器
  netty 提供了两个适配器，是channelInboundHandlerAdapter 和 channelHandlerOutboundAdapter ，两个适配器重写了channelHandler的部分方法，
  可以快速的建立起对应的channelHandler的event方法。具体层次结构见6-2
  
  6.1.6 资源管理
  netty 在channelRead和channelWrite方法处理中，进行的内存监控，当你没有通过release方法释放ByteBuf对象时，netty会产生具体的日志消息提醒。
  netty目前提供了4种检测级别，如6-5所示
  
  如果netty在责任链上想要丢弃消息，并不接受，那么需要通过referenceCountUtil.release() 释放资源，并且在write方法中使用promise.setSuccess通知
  ChannelFutrueListener。read则不需要通知，直接释放就可以了。
  
  6.2 channelpipeline 接口
  channelpipeline是一个连接流经过channel的入站和出站时间的channelHandler实例链，每一个新创建的channel都会被分配到一个新的
  channelpipeline，这项关联是永久性的，channel既不能附加另外一个channelpipeline，也不能分离当前的。
  channelpipeline：
  1 channelpipeline 保存了与channel相关联的channelHandler
  2 channelpipeline 可以根据需要，通过添加或者删除channelHandler来动态地修改
  3 channelpipeline有着丰富的API用以被调用，以相应入站和出站事件
  
  6.3 channelHandlerContext 接口
  channelHandlerContext 代表了channelHandler 和 channelPipeline之间的关联，每当有channelHandler添加到channelPipeline中，都会
  创建channelHandlercontext。channelHandlerContext的主要功能是管理它所关联的channelHandler和在同一个channelPipeline中的其他channel
  Handler之间的交互。
  channelHandlerContext:
  1 channelHandlerContext 和 ChannelHandler之间的关联(绑定)是永远不会改变的，所以缓存对它的引用是安全的
  2 如同我们开头所解释的一样，对于其他类的同名方法，channelhandlercontext的方法将产生更短的事件流，应该尽可能的利用这个特性
  来获取最大的性能。
  6.3.1 使用channelHandlerContext 
  当channelHandler 添加到channelpipeline时，channelHandlerContext会被创建，如果使用channel.write操作，会倒是写入事件从尾端到头
  部地流经channelPipeline。
  通过channelpipeline.write 其方式与上述一样。
  channelHandlerContext.write 则会调用当前channelHandler下一个channelHandler的处理方法,减少了事件的流通。
  6.3.2 channelHandler 和channelHandlerContext 的高级用法
  1 可以通过channelHandler 添加到channelpipeline中实现动态的协议切换
  2 缓存channelContextHandler 进行后续使用
  3 对于channelHandler而言可以共享给多个channelPipeline使用，如果这样的话，需要使用@Shared来标记
  为什么要共享一个channelHandler实例，共享一个可以跨越多个channel收集信息。
  6.4 异常处理
  6.4.1 处理入站异常
  1 channelHandler.exceptionCaught的默认实现方法是简单地将当前异常转发给Channelpipeline中的下一个channelHandler
  2 如果异常到达了channelPipeline的尾端，它将会被记录为未被处理
  3 如果想要定义自定义的处理逻辑，需要从写exceptionCaught方法，然后你需要决定是否需要将该异常传播出去。
  6.4.2 处理出站异常
  1 对于出站异常而言均是通过channelfutrue，注册到channelfutrue的channelListener将操作完成时被通知该操作时成功了还是出错了。
  2 几乎所有的channeloutputboundChannelHandler上的方法都会传入一个channelPromise的实例，作为channelFutrue的子类，channelPromise
  也可以被分配用于异步通知的监听器。但是，channelPromise也可以被分配用于异步通知的监听器，但是，channelpromise还具有提供立即通知
  的可写方法：
  channelPromise setSuccess();
  channelPromise setFail(Throwable cause);
  添加channelFutrueListener 两种方式：
  1 是通过channelHandlerContext.write()方法,获取channelFutrue对象，通过addListener加上监听逻辑
  2 是通过channelFutrueListener添加到即将作为参数传递给channelOutboundHandler的方法的channelPromise。
  
  第七章 eventLoop 和线程模型
  7.1 线程模型概述
  基本线程池化模式可以描述为：
  1 从池的空闲线程列表中选择一个Thread，并且指派它去运行一个已提交的任务（一个Runnable的实现）;
  2 当任务完成时，将该Thread返回给该列表，使其可被重用。
  优势：效率高，消耗小。
  劣势：无法消除由上下文切换带来的开销
  
  7.2 eventLoop 接口
	eventLoop是通过java两个基本API，并发和网络编程。
	事件/任务的执行顺序 事件和任务是以FIFO的顺序执行的，这样可以通过保证字节内容总是按正确的顺序被处理，消除潜在的数据损坏的
	可能性。
  7.2.1  netty4 中的I/O和事件处理
   由I/O操作触发的事件将流经安装了一个或者多个channelHandler的channelPipeline。传播这些事件的方法调用可以随后被channelHandler
   所拦截，并且可以按需地处理事件。在netty4中，所有的I/O操作和事件都已由已经分配给了EventLoop的那个Thread来处理。
  7.2.2 netty3 中的I/O操作
   不太明白，具体说了netty3和netty4在出站线程调度的不同，netty3是通过调用线程处理，出现的问题是导致相同channel下，多个线程同时
触发事件，导致线程安全问题。而netty4则是通过eventLoop线程去处理出站事件，保证多线程下的相同事件被一个Thread处理。第二个缺点是
当出站事件触发入站事件时，比如channel.write方法导致异常，而会触发入站事件exceptionCaught,在netty3的线程模型中，这个是入站事件
需要调用线程自己处理，然后将事件移交给I/O线程取执行，导致额外的上下文切换。netty4的解决方法与上个一致，通过同一个线程处理
eventLoop 所产生的所有事件，没有上下文切换，一个线程也避免了同一个channel下多个线程调用write，触发相同事件
  7.3 任务调度
  如何使用netty的API检测心跳机制，并合理的关闭channel。
  7.3.1 JDK的任务调度API
	在java5之前，任务调度是建立在java.util.Timer 类之上的，其使用了一个后台Thread，并且具有与标准线程相同的限制，随后，JDK提供了
	java.util.concurrent包，定义了线程池。可以通过阻塞延迟线程池来完成这个目标。
  7.3.2 使用eventLoop 调度任务
   ScheduledExecutorService 的实现具有局限性，事实上作为线程池管理的一部分，将会有额外的线程被创建，如果有大量任务被紧凑地调度
   那么这将成为一个瓶颈，而netty的eventLoop实现的任务调度解决了这一问题。netty的eventLoop扩展了ScheduledExecutorService，提供了
   JDK实现所有的可用方法，如果想要取消任务，可以通过ScheduleFutrue.cancel(false)
   7.4 实现细节
   7.4.1 线程管理 不太理解
   eventLoop会对于当前分配的channel而言，会负责处理当前channel的整个生命周期内的所有事件。
   如果当前调用线程是支撑EventLoop的线程，那么所提交的代码块会被直接执行，否则，会被添加到内部队列，等待事件触发后再执行。
   tips：注意如果一个任务执行事件非常长，建议不要放到eventLoop中，会阻塞其他任务的执行，应该通过pipeline添加新的eventLoopGroup
   来完成这个任务。
   7.4.2 EventLoop的线程分配
    1 异步传输：一个eventLoopGroup 分配多个eventLoop，每一个eventLoop由一个线程处理多个channel。因此不同channel共享同一个ThreadLocal
	变量，因此对于实现状态追踪是一个糟糕的选择，而共享一些重度的或者代价昂贵的对象或者是事件。
	2 阻塞传输：用于像OIO旧的阻塞I/O，这样的其他传输的设计略有不同
	这里每一个channel都将分配给一个eventLoop，而一个因此eventLoop与channel为1对1的形式。
	
	
	第八章 引导
	8.1 bootstrap 类 
	1 bootstrap ： 只需要创建一个单独的、没有子channel的channel用于所有的网络交互。
	2 serverbootstrap ： 服务器致力于用一个父channel来接收来自客户端的连接，并创建子channel用于它们之间的通信。
	为什么引导类是cloneable？
	你有时可能会创建多个具有类似配置或者完全相同配置的channel。为了支持这种模式而又不需要为每个channel都创建一个引导类实例，
	AbstractBootStrap被标记为了Cloneable。
	
	8.2 引导客户端和无连接协议
	1 group（EventLoopGroup）  设置用于处理Channel所有事件的eventLoopGroup
	2 channel（Class <？ extends C>）   			  channel()方法指定了channel的实现类。如果该实现类没提供默认的构造方法，可以
	  channelFactory（channelFactory<？extends C>）   通过调用channelFactory()方法来指定一个工厂类，它将会被bind()方法调用。
	3 localAddress（SocketAddress）  指定channel应该绑定到本地地址。如果没有指定，则将由操作系统创建一个随机的地址，挥着可以通过
									 bind()或者connect()方法指定localAddress
	4 option(ChannelOption<T> option,T value) 设置channelOption，其将被应用于每个新创建的channel的channelConfig。这些选项将会通
											  过bind()或者connect()方法设置到Channel，不管哪个先被调用。这个方法在channel已经被
											  创建后再调用将不会有任何的效果。支持channelOption取决于使用的channel类型，
	5 attr(Attribute<T> key,T value) 指定新创建的channel的属性值，这些属性值是通过bind()或者connect()方法设置到Channel的，具体
									  取决于谁最先被调用，这个方法在channel被创建后将不会有任何的效果。
    6 BootStraphandler(channelHandler) 设置将被添加到channelPipeline以接收事件通知的channelHandler
    7 clone()   					   创建一个当前的bootstrap的克隆，其具有和原始的Bootstrap相同的设置信息。
	8 remoteAddress（SocketAddress） 设置远程地址，或者，也可以通过connect()方法来指定它
	9 ChannelFutrue connect()        连接到远程节点并返回一个ChannelFutrue,其将会在连接操作完成后接收到通知。
	10 channelFutrue bind() 		 绑定channel并返回一个channelFutrue，其将会在绑定操作完成后收到通知，在那之后必须调用
									channel.connect()方法来建立连接。
	8.2.1 引导客户端
	详情见8.2图，具体是写了一段bootStrap的引导代码
	8.2.2 Channel和 EventLoopGroup 的兼容性
	channel
	 ---- nio
				NioEventLoopGroup
	 ---- oio
				OioEventLoopGroup
	 ---- socket 
	      -----NIO 
					NioDatagramChannel
					NioServerSocketChannel
					NioSocketChannel
		  -----OIO
					OioDatagramChannel
					OioServerSocketChannel
					OioSocketChannel
	
	在此情况下,对应EvnetLoopGroup不能混用
	NIOEventLoopGroup-》socket（NIO）
	OIOEventLoopGroup-》socket(OIO)
	关于IllegalStateException:
	在引导过程中，在调用bind()或者connect()方法之前，必须调用一下方法设置所需组件
	1 group()
	2 channel或者channelFactory
	3 handler
  8.3引导服务器
  略
  8.4 从channel引导客户端
  对于服务端而言，处理数据要注意的是，需要服务eventLoop，减少线程上下文的切换和创建线程不必要的开支。
  具体代码看  8-5
  8.5 在引导过程中添加多个channelHandler
  在之前的代码中，我们添加channelHandler都是添加一个，如果需要添加多个channelHandler需要使用ChannnelInitializer
  此方法可以获取对应的channel并能拿到channelPipeline，从而可以使用链式编程将channelHandler添加进去。
  具体引导方法见 8-6
  8.6 使用netty的channelOption和属性
  channelOption可以通过参数配置netty的参数，也可以通过attr方法设置在netty的生命周期之外使用channel的属性和值。
  具体请看8-7
  8.7 引导DatagramChannel 
  OioEventLoop-》OioDatagramChannel-》DatagramPacket
  具体代码请见8-8
  8.8 关闭
  关闭时需关闭eventloopgroup ，它将处理任何挂起的事件和任务，并且随后释放所有活动的线程，这就是调用shutdownGracefully（）方法的
  作用，需要知道的是，这个方法也是一个异步操作，因此你需要通过sync（）阻塞直到方法调用结束或者向channelFutrue上注册监听获取结束
  后的通知，或者你也可以在EventLoopgroup调用此方法前，通过channel.close关闭通道,但是请记得关闭EventLoopgroup本身。
  
  第九章 单元测试
  略
  
  第十章 编解码框架
  对于网络编程而言，在网络中传递的是二进制字节，因此在处理数据的时候要根据不同的协议，通过不同的编解码器，来进行对应的操作。
  10.1 什么是编解码器
  编解码器可以看做是一个数据格式的相互转换，这种转换逻辑由编解码器处理，编解码器由编码器和解码器组成，它们每种都可以将字节流从
  一种格式转换为另一种格式。
 编码器处理出站数据，解码器处理入站数据
 10.2 解码器
 1 将字节码转换为消息-----ByteToMessageDecoder 和ReplayingDecoder
 2 将消息类型解码为另外一种---- MessageToMessageDecoder
 10.2.1 抽象类ByteMessageDecoder
 很重要：
 netty提供了一个抽象的基类：ByteToMessageDecoder，由于你不可能知道远程节点是否会一次性地发送一个完整的消息，所以这个类会对入站数据
 进行缓冲，直到它准备好处理。（那么就可以解决下面6的问题了）
 decode (ChannelHandlerContext ctx,ByteBuf in , List<Object> out)  这是你需要实现的唯一抽象方法，decode()方法被调用时将会传入一个包含了传入数据的ByteBuf，以及一个用来
																   添加解码消息的List。对这个方法的调用将会重复进行，直到确定没有新的元素添加到该List，或者该ByteBuf中
																   没有更多可读取的字节时为止。然后，如果该List不会空。那么它的内容将会被传递给ChannelPipeline中的下一
																   个ChannelInboudHandler。
 decodeLast(ChannelHandlerContext ctx,ByteBuf in , List<Object> out) Netty提供的这个默认实现只是简单地调用了decode方法().当Channel地状态变为非活动时，这个方法将会被调用
																	一次。可以重写该方法以提供特殊地处理。
																	
 10.2.2 抽象类 ReplayingDecoder ，此类扩展了byteToMessageDecoder类，使得我们不必调用readableBytes()方法，它通过使用一个自定义的ByteBuf实现，replayingDecoderByteBuf，包装
 传入的ByteBuf实现这一点，将其在内部执行该调用。
  
  
  
	
记录问题：
1 如何通过channelhandlerContext ctx 写出数据到服务端，而服务端又怎么将数据写出到客户端。
2 写出数据是否可以使用channel或者ctx写出？还是只能用其中一个？
3 channelpipeline 的 channelHandler 顺序问题 ，如何解决顺序链处理问题？
 outputbound必须在inputbound之前，不然数据的读取和写出有误。
 原因： 因为使用了channelContextHandler.write方法，这个方法是触发当前channelHandler的下一个channelhandler来处理相应事件，
 而出站事件是通过tail->prev 因此如果在inputbound中调用write方法，其本身会取找prev节点，而outputbound是在next节点，因此outputbound
 不会触发。
解答: 通过channelHandlerContext使用writeandFlush操作，会通过当前channelHandler，向上回溯，会触发outputboundchannelHandler的write操作，如果在当前
inputboundchannelHandler之前的链上没有outputChannelHandler则不会触发任何操作，之后的有output是不会触发的。因此在新增channelHandler
而通过channel或者channelpipeline不会出现这个问题。
tips：通过channelHandlerContext的write和writeFlush操作的操作链时通过tail到prev。如果责任链顺序不同，可能导致outputbound事件不会
触发。
添加channelHandler时，要注意顺序。

4 server 端需要在read结束后就关闭通道 否则通道就会一直循环读取和发送

5 如何通过channelHandlerContext.write（）.addListener() 去触发异常问题？？
需要通过在outputbound上的write方法中添加异常，此时，已经注册监听的channelFutrue会触发异常代码。

6 对于netty而言，如何区分文件或者字符串，虽然可以通过约定部分字节传递文件类型和长度，但是怎么保证一个byteBuf下可以获取整个传输
的值，如果是分段传递，第一段传递的类型和长度就如何共享给整个channel，对于断点续传的情况如何保证？

7 delayExecutor怎么实现的？
对于延时线程而言，主要的方式是通过延时队列实现的，而延时队列则是依赖优先级队列完成的，在延时队列中，当用get方法时，会通过优先级队列
判断当前的first节点是否到期，因为使用的是优先级队列，可以重写compareTo方法，因此头节点是过期时间最早的，当头节点未过期，当前方法
会阻塞，并且会将其他线程等待，将leader线程设置为当前线程（防止其他线程同时唤醒争抢）。


8 学习spring 定时任务框架 ，理清楚quartz和schedule的区别


思考的问题
 cookie 记录了session的key值，如果返回到浏览器中，通过复制cookie释放可以复制整个会话的状态？
 如果不会是怎么保证安全性的？
 
	
 
	
	
	
	重点： 
	需要学习mybatis的逆向工程，回头写一个通过json自动生成实体类。
